package com.github.kitakkun.orenon.tool

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy

class AstClassGenerator {
    private val basePackageName = "com.github.kitakkun.orenon"
    private val exprClassName = ClassName(basePackageName, "Expr")
    private val tokenClassName = ClassName(basePackageName, "Token")

    private val exprClassSpecs = listOf(
        ExprClassSpec(
            name = "Binary",
            properties = mapOf(
                "left" to exprClassName,
                "operator" to tokenClassName,
                "right" to exprClassName,
            )
        ),
        ExprClassSpec(
            name = "Grouping",
            properties = mapOf(
                "expression" to exprClassName,
            )
        ),
        ExprClassSpec(
            name = "Literal",
            properties = mapOf(
                "value" to Any::class.asTypeName().copy(nullable = true),
            )
        ),
        ExprClassSpec(
            name = "Unary",
            properties = mapOf(
                "operator" to tokenClassName,
                "right" to exprClassName,
            )
        )
    )

    data class ExprClassSpec(
        val name: String,
        val properties: Map<String, TypeName>,
    )

    fun generate(): FileSpec {
        val file = FileSpec.builder(basePackageName, "Expr")
            .indent("    ")
            .addFileComment(
                """
                This code is automatically generated by program. DO NOT EDIT.
                """.trimIndent()
            )
            .addType(
                TypeSpec.classBuilder(exprClassName)
                    .addModifiers(KModifier.SEALED)
                    .addTypes(
                        exprClassSpecs.map { spec ->
                            val propertySpecs = spec.properties.map { (name, className) ->
                                PropertySpec.builder(name, className)
                                    .initializer(name)
                                    .build()
                            }
                            val parameterSpecs = spec.properties.map { (name, className) ->
                                ParameterSpec.builder(name, className).build()
                            }
                            TypeSpec.classBuilder(spec.name)
                                .addModifiers(KModifier.DATA)
                                .superclass(exprClassName)
                                .addProperties(propertySpecs)
                                .primaryConstructor(
                                    FunSpec.constructorBuilder()
                                        .addParameters(parameterSpecs)
                                        .build()
                                )
                                .addFunction(
                                    FunSpec.builder("accept")
                                        .addModifiers(KModifier.OVERRIDE)
                                        .addTypeVariable(TypeVariableName.invoke("R"))
                                        .addParameter("visitor", ClassName(basePackageName, "Expr.Visitor").parameterizedBy(TypeVariableName.invoke("R")))
                                        .returns(returnType = TypeVariableName.invoke("R"))
                                        .addCode(
                                            """
                                                return visitor.visit${spec.name.replaceFirstChar { it.uppercaseChar() }}Expr(this)
                                            """.trimIndent()
                                        )
                                        .build()
                                )
                                .build()
                        }
                    )
                    .addType(
                        TypeSpec.interfaceBuilder("Visitor")
                            .addTypeVariable(TypeVariableName.invoke("R"))
                            .addFunctions(
                                exprClassSpecs.map { spec ->
                                    FunSpec.builder("visit${spec.name.replaceFirstChar { it.uppercaseChar() }}Expr")
                                        .addModifiers(KModifier.ABSTRACT)
                                        .addParameter(
                                            ParameterSpec("expr", ClassName(basePackageName, "Expr.${spec.name}"))
                                        )
                                        .returns(TypeVariableName.invoke("R"))
                                        .build()
                                }
                            )
                            .build()
                    )
                    .addFunction(
                        FunSpec.builder("accept")
                            .addModifiers(KModifier.ABSTRACT)
                            .addTypeVariable(TypeVariableName.invoke("R"))
                            .addParameter("visitor", ClassName(basePackageName, "Expr.Visitor").parameterizedBy(TypeVariableName.invoke("R")))
                            .returns(returnType = TypeVariableName.invoke("R"))
                            .clearBody()
                            .build()
                    )
                    .build()
            )
            .build()

        return file
    }
}
